@Library('Tarator@main') _
import jenkins.model.Jenkins
import com.tarator.gui.PipelineNames
import com.tarator.jobs.Agent
import com.tarator.gui.JobParameters



pipeline {
    agent {
        kubernetes {
            cloud Agent.K8S_MDH
            yaml Agent.getKubernetesAgentYaml()
        }
    }

    parameters {
        booleanParam(name: 'JUST_UPDATE_JOB_CONFIG', defaultValue: false, description:"${JobParameters.PARAM_OPTIONAL} Just Update the configuration of this job - exit on Configuration step")
        booleanParam(name: 'BUILD_GAMES', defaultValue: true, description: 'Build all MES projects (CPG, DevOps, EiHub, Parrot, PharmaSuite, ProductionCentre)')
        booleanParam(name: 'BUILD_SUDOKU', defaultValue: false, description: 'Build administration folder')
    }

    stages {

        stage('Job Configuration') {
            steps {
                abortIfJustUpdateJob(params.JUST_UPDATE_JOB_CONFIG)
            }
        }

        stage('Build Projects') {
            steps {
                script {
                    filePath = sh(script: "pwd", returnStdout: true).trim() + "/src/com/tarator/gui/PipelineNames.groovy"
                    String devPrefix = sh(script: "grep 'static final String devPrefix' ${filePath} | awk -F'\"' '{print \$2}'", returnStdout: true).trim()
                    println devPrefix
                    if (devPrefix) {
                        error("'devPrefix' inside 'src/com/tarator/gui/PipelineNames.groovy' MUST BE EMPTY!")
                    }
                    if (params.BUILD_SUDOKU || params.BUILD_GAMES) {
                        jobDsl targets: 'JobDSL/Sudoku/sudoku_folder_job.groovy', additionalClasspath: ['src/'].join('\n')
                        jobDsl targets: 'JobDSL/Sudoku/sudoku_job.groovy', additionalClasspath: ['src/'].join('\n')
                    }
                }
            }
        }
    }

}
