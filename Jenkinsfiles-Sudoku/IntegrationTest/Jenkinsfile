@Library('Tarator@main') _

import com.tarator.jobs.JobParameters
import com.tarator.jobs.triggers.TriggersBase
import com.tarator.jobs.Agent
import com.tarator.jobs.parameters.ParametersBuildBase

def parameters = new ParametersBuildBase(this, env.JOB_BASE_NAME)
parameters.addGeneralBuildParams()

pipeline {
    agent {
        kubernetes {
            cloud Agent.K8S_TARATOR
            yaml Agent.getKubernetesAgentYaml()
        }
    }

    environment {
        PYTHON_ENV = "venv"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Set Up Python Environment') {
            steps {
                script {
                    if (!fileExists("${PYTHON_ENV}")) {
                        sh 'python3 -m venv venv'
                    }
                    sh '. venv/bin/activate'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '. venv/bin/activate && pip install --upgrade pip'
                sh '. venv/bin/activate && pip install -r app/requirements.txt'
            }
        }

        stage('Run Integration Tests') {
            when { expression { return params.RUN_INTEGRATION_TESTS } }
            steps {
                sh '. venv/bin/activate && pytest app/integration_tests/ --junitxml=integration_results.xml'
            }
            post {
                always {
                    junit 'integration_results.xml'
                }
            }
        }

        stage('Code Coverage') {
            when { expression { return params.PUBLISH_COVERAGE } }
            steps {
                sh '. venv/bin/activate && coverage run -m pytest app/integration_tests/'
                sh '. venv/bin/activate && coverage report'
                sh '. venv/bin/activate && coverage xml'
            }
            post {
                always {
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                }
            }
        }

        stage('Linting') {
            when { expression { return params.ENABLE_LINTING } }
            steps {
                sh '. venv/bin/activate && flake8 app/'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
